#include <SoftwareSerial.h>

SoftwareSerial mySerial(10, 11); // RX, TX

char aux_string[500];
String buffer1 = "/dummy.php?a=Ngfdg&b=cvcfx";
unsigned int i = 0, h = 0;
int8_t len = 4, p, len_call = 4, K = 0;
int8_t answer, val123 = 0, FLAG = 0, kk = 0, hht = 0, bac = 0, CNT = 0, var;
int x = 0, j = 0, ch;


void setup ()
{



  Serial.begin(9600); //Initializing serial port to 9600 baud rate
  delay(100);  // small delay to stabilize
  mySerial.begin(9600);  //Initializing Soft-serial port to 9600 baud rate
  Serial.println("STARTING...");
  power_on();  // Calling power_on function
  delay(2000);

  sendATcommand("AT+CMGF=1", "OK", 1000);  //Set SMS system into text mode, as opposed to PDU mode.
  delay(1500);

  Serial.println("GSM IS READY...");
}

void loop ()
{

  UPLOAD();      // Calling Upload function
  delay(10000);  // To upload every 10 seconds
}


void UPLOAD()
{
  delay(300);
  answer = sendATcommand("AT+CIPSTART=\"TCP\",\"www.xyz.com\",\"80\"", "CONNECT OK", 15000);//Start up TCP or UDP connection
  if (answer == 1)
  {
    K = 10;
    delay(500);
    Serial.println("Connected");
    answer = sendATcommand("AT+CIPSEND", ">", 5000);  //Send data through TCP or UDP connection
    if (answer == 1)
    {
      mySerial.print("GET ");   //Using GET Meathod
      mySerial.print(buffer1);  //Jason Parsing Link
      mySerial.println(" HTTP/1.1");

      mySerial.print("Host: ");
      mySerial.println("www.xyz.com");  // host address
      mySerial.println("Connection: close");
      mySerial.println();
      mySerial.write(byte(0x1A));  // Ascii for CTRL+Z
      //sendATcommand("", "HTTP/1.1 200 OK", 15000);
      answer = sendATcommand("", "HTTP/1.1 200 OK", 15000);
      if (answer == 1)
      {
        while (!mySerial.available());

        i = 0;
        int cn1 = 0;

        while (i < 220)
        {
          if (mySerial.available())
          {

            var = mySerial.read();  // Reading the response

            aux_string[i] = var;    //Storing them in an array
            i++;

          }

        }

        //Serial.println(aux_string);
        Serial.println("DONE");

        Serial.println(aux_string);
        for (i = 0; i < sizeof(aux_string); i++)
        {
          if (aux_string[i] == '@')
            Serial.println(aux_string[i + 1]);
        }

      }

      sendATcommand("AT+CIPCLOSE", "CLOSE OK", 5000); // Closing the connection
    }
  }
}


void power_on()
{

  uint8_t answer = 0;
start:
  answer = 0;
  while (answer == 0)
  {
    answer = sendATcommand("", "Call Ready", 20000);  //Waiting for call ready
    answer = sendATcommand("AT", "OK", 2000);  //Test command
    answer = sendATcommand("AT+IPR=9600", "OK", 2000); //Set the baud rate
    if (answer == 1)
    {
      answer = sendATcommand("AT", "OK", 2000);  //Test command
      if (answer == 1)
      {
        delay(300);
        sendATcommand("AT+CMGF=1", "OK", 1000); //Set SMS system into text mode, as opposed to PDU mode.
      }
    }

  }


  sendATcommand("AT+CFUN=1", "OK", 1000); //Used to reset module purposely at minimum/full functionality mode
  answer = sendATcommand("AT+CSTT=\"imis/internet\",\"\",\"\"", "OK", 5000); // IDEA APN
  delay(1000);
  sendATcommand("AT+CIICR", "OK", 3000);  //Bring up wireless connection with GPRS or CSD
  sendATcommand("AT+CIFSR", "OK", 15000); //Get local IP address

}

int8_t sendATcommand(char* ATcommand, char* expected_answer1, unsigned int timeout) {

  uint8_t x = 0,  answer = 0;
  char response[200];
  unsigned long previous;
  memset(response, '\0', 200);    // Initialize the string
  delay(100);
  while ( mySerial.available() > 0) mySerial.read();   // Clean the input buffer
  mySerial.println(ATcommand);    // Send the AT command
  x = 0;
  previous = millis();
  // this loop waits for the answer
  do
  {
    if (mySerial.available() != 0)
    {
      response[x] = mySerial.read();
      Serial.write(response[x]);
      x++;
      // check if the desired answer is in the response of the module
      if (strstr(response, expected_answer1) != NULL)
      {
        answer = 1;
      }
      if (x > 180)
        x = 0;
    }
    // Waits for the asnwer with time out
  }
  while ((answer == 0) && ((millis() - previous) < timeout));
  return answer;
}
